/**
 * NSDL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable({
    providedIn: 'root'
})
export class PdfService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiPdfGenerateAndDownloadPost(applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiPdfGenerateAndDownloadPost(applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiPdfGenerateAndDownloadPost(applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiPdfGenerateAndDownloadPost(applicationId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (applicationId !== undefined && applicationId !== null) {
            queryParameters = queryParameters.set('applicationId', <any>applicationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
   
        // return this.httpClient.request<any>('post', `${this.basePath}/api/pdf/GenerateAndDownload`,
        //     {
        //         params: queryParameters,
        //         withCredentials: this.configuration.withCredentials,
        //         headers: headers,
        //         observe: observe,
        //         reportProgress: reportProgress
        //     }
        // );

        return this.httpClient.post(`${this.basePath}/api/pdf/GenerateAndDownload`,  {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            responseType: 'blob', // Important: Expect a binary file (PDF)
            observe: 'body'
        });
    }

    /**
     * 
     * 
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiPdfGenerateCertificatePdfPost(applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiPdfGenerateCertificatePdfPost(applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiPdfGenerateCertificatePdfPost(applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiPdfGenerateCertificatePdfPost(applicationId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (applicationId !== undefined && applicationId !== null) {
            queryParameters = queryParameters.set('applicationId', <any>applicationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // return this.httpClient.request<any>('post',`${this.basePath}/api/pdf/GenerateCertificatePdf`,
        //     {
        //         params: queryParameters,
        //         withCredentials: this.configuration.withCredentials,
        //         headers: headers,
        //         observe: observe,
        //         reportProgress: reportProgress
        //     }
        // );

        return this.httpClient.post(`${this.basePath}/api/pdf/GenerateCertificatePdf`, {}, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            responseType: 'blob', // Important: Expect a binary file (PDF)
            observe: 'body'
        });
    }

}
